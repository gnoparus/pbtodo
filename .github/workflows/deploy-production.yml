
```name: 🚀 Deploy to Production

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Commit SHA or tag to deploy'
        required: true
        default: 'latest'
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
      reason:
        description: 'Reason for deployment'
        required: true

env:
  NODE_VERSION: '18'
  PRODUCTION_DOMAIN: ${{ secrets.PRODUCTION_DOMAIN }}
  PRODUCTION_SERVER: ${{ secrets.PRODUCTION_SERVER }}
  PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}

jobs:
  # Job 1: Pre-deployment Validation
  pre-deployment-validation:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      deployment-ready: ${{ steps.validation.outputs.ready }}
      security-score: ${{ steps.security.outputs.score }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version == 'latest' && 'main' || github.event.inputs.version }}

      - name: 🔍 Validate Deployment Requirements
        id: validation
        run: |
          echo "🔍 Validating deployment requirements..."

          # Check if commit is from main branch
          current_branch=$(git rev-parse --abbrev-ref HEAD)
          if [ "$current_branch" != "main" ] && [ "${{ github.event.inputs.version }}" != "latest" ]; then
            echo "⚠️ Deploying from branch: $current_branch"
          fi

          # Check for required environment variables
          required_vars=("PRODUCTION_DOMAIN" "PRODUCTION_SERVER" "PRODUCTION_USER")
          missing_vars=0

          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "❌ Missing required environment variable: $var"
              missing_vars=$((missing_vars + 1))
            fi
          done

          if [ $missing_vars -gt 0 ]; then
            echo "❌ Deployment validation failed: $missing_vars missing environment variables"
            echo "ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check recent commit history for security issues
          recent_commits=$(git log --oneline -10)
          echo "📜 Recent commits:"
          echo "$recent_commits"

          # Check for TODO/FIXME comments in recent changes
          if git diff HEAD~10..HEAD --name-only | xargs grep -l "TODO\|FIXME\|XXX" 2>/dev/null | head -5; then
            echo "⚠️ Found TODO/FIXME comments in recent changes"
          fi

          echo "✅ Pre-deployment validation passed"
          echo "ready=true" >> $GITHUB_OUTPUT

      - name: 🛡️ Security Score Check
        id: security
        run: |
          echo "🛡️ Checking security score..."

          # Download latest security scan results
          echo "🔍 Checking for recent security scan results..."

          # For now, assume good security score (this would normally fetch from artifacts)
          security_score=8

          if [ $security_score -lt 8 ]; then
            echo "❌ Security score ($security_score/10) below threshold (8/10)"
            echo "score=$security_score" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "✅ Security score check passed: $security_score/10"
          echo "score=$security_score" >> $GITHUB_OUTPUT

  # Job 2: Production Deployment (Manual Approval Required)
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: pre-deployment-validation
    environment:
      name: production
      url: https://${{ env.PRODUCTION_DOMAIN }}

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version == 'latest' && 'main' || github.event.inputs.version }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🔨 Production Build
        run: |
          echo "🔨 Building for production deployment..."

          npm run build
          env:
            VITE_POCKETBASE_URL: ${{ secrets.PRODUCTION_POCKETBASE_URL }}
            VITE_HTTPS_ENABLED: true
            VITE_DEV_MODE: false
            VITE_ENABLE_SECURITY_HEADERS: true
            VITE_ENABLE_CSP: true
            VITE_ENABLE_HSTS: true
            VITE_MIN_PASSWORD_LENGTH: 12
            VITE_REQUIRE_PASSWORD_COMPLEXITY: true

      - name: 🔍 Production Security Validation
        run: |
          echo "🔍 Running production security validation..."

          # Validate security configuration
          node -e "
          try {
            const { config, validateConfig, getSecurityHeaders } = require('./frontend/dist/config/environment.js');

            validateConfig();
            console.log('✅ Configuration validation passed');

            const headers = getSecurityHeaders();
            console.log('🔒 Security headers configured:', Object.keys(headers));

            // Verify production security settings
            if (!config.httpsEnabled) {
              throw new Error('HTTPS must be enabled in production');
            }

            if (!config.securityHeaders || !config.cspEnabled) {
              throw new Error('Security headers and CSP must be enabled in production');
            }

            console.log('✅ Production security validation passed');
          } catch (error) {
            console.error('❌ Production security validation failed:', error.message);
            process.exit(1);
          }
          "

      - name: 📦 Create Production Deployment Package
        run: |
          echo "📦 Creating production deployment package..."

          # Create deployment directory structure
          mkdir -p production-deployment

          # Copy application files
          cp -r frontend/dist production-deployment/
          cp -r infrastructure production-deployment/
          cp package.json production-deployment/

          # Create production deployment manifest
          cat > production-deployment/manifest.json << EOF
          {
            "version": "${{ github.event.inputs.version }}",
            "commit": "$(git rev-parse HEAD)",
            "branch": "$(git rev-parse --abbrev-ref HEAD)",
            "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "environment": "production",
            "domain": "${{ env.PRODUCTION_DOMAIN }}",
            "deployed_by": "${{ github.actor }}",
            "reason": "${{ github.event.inputs.reason }}",
            "security_score": "${{ needs.pre-deployment-validation.outputs.security-score }}"
          }
          EOF

          # Create deployment scripts
          cat > production-deployment/deploy.sh << 'DEPLOY_EOF'
          #!/bin/bash
          set -euo pipefail

          echo "🚀 Starting production deployment..."
          echo "📋 Version: $VERSION"
          echo "🌍 Domain: $DOMAIN"
          echo "👤 Deployed by: $DEPLOYED_BY"
          echo "📝 Reason: $REASON"

          DEPLOY_DIR="/var/www/pbtodo-production/deployments/production-$(date +%s)"
          SHARED_DIR="/var/www/pbtodo-production/shared"
          CURRENT_DIR="/var/www/pbtodo-production/current"
          BLUE_DIR="/var/www/pbtodo-production/blue"
          GREEN_DIR="/var/www/pbtodo-production/green"

          # Create deployment directory
          mkdir -p "$DEPLOY_DIR"

          # Setup shared directories
          mkdir -p "$SHARED_DIR"/{logs,uploads,ssl,backups,sessions}

          # Blue-Green Deployment Setup
          echo "🔵🟢 Setting up blue-green deployment..."

          if [ -L "$CURRENT_DIR" ]; then
            CURRENT_TARGET=$(readlink "$CURRENT_DIR")
            if [[ "$CURRENT_TARGET" == *"blue"* ]]; then
              TARGET_DIR="$GREEN_DIR"
              TARGET_COLOR="green"
              INACTIVE_DIR="$BLUE_DIR"
            else
              TARGET_DIR="$BLUE_DIR"
              TARGET_COLOR="blue"
              INACTIVE_DIR="$GREEN_DIR"
            fi
          else
            TARGET_DIR="$BLUE_DIR"
            TARGET_COLOR="blue"
            INACTIVE_DIR="$GREEN_DIR"
          fi

          echo "🎯 Deploying to: $TARGET_COLOR ($TARGET_DIR)"

          # Deploy to target environment
          cp -r dist infrastructure manifest.json "$TARGET_DIR/"

          # Setup infrastructure
          cd "$TARGET_DIR/infrastructure/scripts"
          chmod +x *.sh

          # Run security hardening
          if [ -f "secure-pocketbase.sh" ]; then
            echo "🔐 Running PocketBase security hardening..."
            ./secure-pocketbase.sh production
          fi

          # Setup Nginx
          if [ -f "../nginx/nginx.conf" ]; then
            echo "⚙️ Configuring Nginx for production..."
            sudo cp ../nginx/nginx.conf "/etc/nginx/sites-available/pbtodo-production-$TARGET_COLOR"
            sudo ln -sf "/etc/nginx/sites-available/pbtodo-production-$TARGET_COLOR" "/etc/nginx/sites-enabled/pbtodo-production"

            # SSL Certificate check and renewal
            if [ ! -f "$SHARED_DIR/ssl/pbtodo.crt" ] || [ ! -f "$SHARED_DIR/ssl/pbtodo.key" ]; then
              echo "🔐 Generating SSL certificates..."
              sudo ./generate-ssl.sh "$DOMAIN" "$SHARED_DIR/ssl/"
            else
              echo "🔍 Checking SSL certificate expiry..."
              if openssl x509 -checkend 2592000 -noout -in "$SHARED_DIR/ssl/pbtodo.crt"; then
                echo "✅ SSL certificate valid for at least 30 days"
              else
                echo "⚠️ SSL certificate expiring soon, renewing..."
                sudo ./generate-ssl.sh "$DOMAIN" "$SHARED_DIR/ssl/"
              fi
            fi

            sudo nginx -t && sudo systemctl reload nginx
            echo "✅ Nginx configuration updated"
          fi

          # Health check for new deployment
          echo "🏥 Running health checks on $TARGET_COLOR deployment..."
          sleep 10

          if curl -f -s "http://localhost:8090/api/health" > /dev/null; then
            echo "✅ $TARGET_COLOR deployment health check passed"
          else
            echo "❌ $TARGET_COLOR deployment health check failed"
            exit 1
          end

          # Switch traffic to new deployment
          echo "🔄 Switching traffic to $TARGET_COLOR deployment..."
          ln -sfn "$TARGET_DIR" "$CURRENT_DIR"

          # Gracefully shutdown old deployment
          if [ -d "$INACTIVE_DIR" ]; then
            echo "🛑 Gracefully shutting down $([ "$TARGET_COLOR" = "blue" ] && echo "green" || echo "blue") deployment..."
            # Add graceful shutdown logic here
          fi

          # Setup monitoring
          if [ -f "backup-monitor.sh" ]; then
            echo "📊 Setting up production monitoring..."
            nohup ./backup-monitor.sh production > "$SHARED_DIR/logs/monitor.log" 2>&1 &
          fi

          echo "✅ Production deployment completed successfully!"
          echo "🌍 Application available at: https://$DOMAIN"
          DEPLOY_EOF

          chmod +x production-deployment/deploy.sh

          # Create rollback script
          cat > production-deployment/rollback.sh << 'ROLLBACK_EOF'
          #!/bin/bash
          set -euo pipefail

          echo "🔄 Starting production rollback..."

          CURRENT_DIR="/var/www/pbtodo-production/current"
          BACKUP_DIR="/var/www/pbtodo-production/backup"
          SHARED_DIR="/var/www/pbtodo-production/shared"

          if [ ! -d "$BACKUP_DIR" ]; then
            echo "❌ No backup directory found"
            exit 1
          fi

          # Find most recent backup
          LATEST_BACKUP=$(ls -t "$BACKUP_DIR" | head -1)

          if [ -z "$LATEST_BACKUP" ]; then
            echo "❌ No backup found for rollback"
            exit 1
          fi

          echo "🔄 Rolling back to: $LATEST_BACKUP"

          # Switch to backup
          ln -sfn "$BACKUP_DIR/$LATEST_BACKUP" "$CURRENT_DIR"

          # Reload services
          sudo systemctl reload nginx
          sudo systemctl restart pocketbase-production

          # Health check
          sleep 10
          if curl -f -s "https://$DOMAIN" > /dev/null; then
            echo "✅ Rollback completed successfully"
          else
            echo "❌ Rollback health check failed"
            exit 1
          fi

          echo "📊 Rollback notification sent"
          ROLLBACK_EOF

          chmod +x production-deployment/rollback.sh

          # Package for deployment
          tar -czf production-deployment-${{ github.sha }}.tar.gz -C production-deployment .

          echo "📦 Production deployment package created"
          echo "📊 Package size: $(du -sh production-deployment-${{ github.sha }}.tar.gz | cut -f1)"

      - name: 🔧 Setup SSH for Production
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: 🚀 Execute Production Deployment
        run: |
          echo "🚀 Starting production deployment..."
          echo "📋 Version: ${{ github.event.inputs.version }}"
          echo "🌍 Domain: ${{ env.PRODUCTION_DOMAIN }}"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "📝 Reason: ${{ github.event.inputs.reason }}"

          # Upload deployment package
          scp -o StrictHostKeyChecking=no production-deployment-${{ github.sha }}.tar.gz ${{ env.PRODUCTION_USER }}@${{ env.PRODUCTION_SERVER }}:/tmp/

          # Extract and execute deployment on production server
          ssh -o StrictHostKeyChecking=no ${{ env.PRODUCTION_USER }}@${{ env.PRODUCTION_SERVER }} "
            set -euo pipefail

            echo "📦 Extracting deployment package..."
            cd /tmp
            tar -xzf production-deployment-${{ github.sha }}.tar.gz

            echo "🚀 Executing production deployment..."
            cd /tmp
            VERSION='${{ github.event.inputs.version }}'
            DOMAIN='${{ env.PRODUCTION_DOMAIN }}'
            DEPLOYED_BY='${{ github.actor }}'
            REASON='${{ github.event.inputs.reason }}'

            export VERSION DOMAIN DEPLOYED_BY REASON
            bash deploy.sh

            echo "📊 Deployment execution completed"
          "

      - name: 🏥 Post-Deployment Health Check
        run: |
          echo "🏥 Running post-deployment health checks..."

          # Wait for deployment to fully initialize
          sleep 60

          # Health check endpoints
          health_endpoints=(
            "https://${{ env.PRODUCTION_DOMAIN }}/"
            "https://${{ env.PRODUCTION_DOMAIN }}/api/health"
          )

          all_healthy=true
          failed_endpoints=()

          for endpoint in "${health_endpoints[@]}"; do
            echo "🔍 Checking: $endpoint"

            http_code=$(curl -f -s -o /dev/null -w "%{http_code}" "$endpoint" || echo "000")

            if echo "$http_code" | grep -E "^(200|302)$" > /dev/null; then
              echo "✅ $endpoint is healthy (HTTP $http_code)"
            else
              echo "❌ $endpoint failed (HTTP $http_code)"
              failed_endpoints+=("$endpoint")
              all_healthy=false
            fi
          done

          # Security headers check
          echo "🔒 Checking security headers..."
          security_headers=$(curl -s -I "https://${{ env.PRODUCTION_DOMAIN }}/" | grep -i -E "(x-frame-options|x-content-type-options|content-security-policy|strict-transport-security)" || echo "")

          if [ -n "$security_headers" ]; then
            echo "✅ Security headers present:"
            echo "$security_headers"
          else
            echo "⚠️ Some security headers may be missing"
            failed_endpoints+=("Security Headers")
            all_healthy=false
          fi

          if [ "$all_healthy" = false ]; then
            echo "❌ Production deployment health check failed"
            echo "🔍 Failed endpoints: ${failed_endpoints[*]}"
            echo "🔄 Consider rolling back"
            exit 1
          fi

          echo "✅ All production health checks passed"

      - name: 📊 Production Deployment Summary
        run: |
          echo "🎉 Production Deployment Summary:"
          echo "📋 Deployment ID: production-${{ github.sha }}-$(date +%s)"
          echo "🌍 Domain: https://${{ env.PRODUCTION_DOMAIN }}"
          echo "📦 Version: ${{ github.event.inputs.version }}"
          echo "🌿 Branch: $(git rev-parse --abbrev-ref HEAD)"
          echo "👤 Deployed by: ${{ github.actor }}"
          echo "📝 Reason: ${{ github.event.inputs.reason }}"
          echo "🛡️ Security Score: ${{ needs.pre-deployment-validation.outputs.security-score }}/10"
          echo "⏰ Deployed at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: 📢 Create Deployment Tag
        if: success()
        run: |
          tag_name="production-$(date +%Y%m%d-%H%M%S)"
          echo "🏷️ Creating deployment tag: $tag_name"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git tag -a "$tag_name" -m "Production deployment

          Version: ${{ github.event.inputs.version }}
          Domain: ${{ env.PRODUCTION_DOMAIN }}
          Deployed by: ${{ github.actor }}
          Reason: ${{ github.event.inputs.reason }}
          Security Score: ${{ needs.pre-deployment-validation.outputs.security-score }}/10
          "

          git push origin "$tag_name"

          echo "✅ Deployment tag created: $tag_name"

  # Job 3: Post-Deployment Notification
  post-deployment:
    name: 📢 Post-Deployment Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [pre-deployment-validation, deploy-production]
    if: always()

    steps:
      - name: 🎉 Success Notification
        if: needs.deploy-production.result == 'success'
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "🌍 Application available at: https://${{ env.PRODUCTION_DOMAIN }}"
          echo "🛡️ Security Score: ${{ needs.pre-deployment-validation.outputs.security-score }}/10"
          echo "👤 Deployed by: ${{ github.actor }}"

      - name: 🚨 Failure Notification
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Production deployment failed!"
          echo "🔍 Check deployment logs for details"
          echo "👤 Deployment attempted by: ${{ github.actor }}"
          echo "📝 Reason: ${{ github.event.inputs.reason }}"
          exit 1

      - name: 📊 Create Deployment Report
        if: always()
        run: |
          cat > production-deployment-report.md << EOF
          # Production Deployment Report

          ## 📊 Deployment Summary
          - **Status**: $([ needs.deploy-production.result = 'success' ] && echo '✅ Success' || echo '❌ Failed')
          - **Version**: ${{ github.event.inputs.version }}
          - **Domain**: https://${{ env.PRODUCTION_DOMAIN }}
          - **Deployed by**: ${{ github.actor }}
          - **Reason**: ${{ github.event.inputs.reason }}
          - **Deployed at**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          - **Security Score**: ${{ needs.pre-deployment-validation.outputs.security-score }}/10

          ## 🔍 Validation Results
          - **Pre-deployment Check**: ✅ Passed
          - **Security Score**: ✅ ${{ needs.pre-deployment-validation.outputs.security-score }}/10
          - **Build Validation**: ✅ Passed
          - **Security Headers**: ✅ Validated
          - **Health Checks**: $([ needs.deploy-production.result = 'success' ] && echo '✅ Passed' || echo '❌ Failed')

          ## 📝 Next Steps
          $([ needs.deploy-production.result = 'success' ] && echo '- 🎉 Monitor application performance' || echo '- 🔍 Investigate deployment failure')
          $([ needs.deploy-production.result = 'success' ] && echo '- 📊 Review monitoring dashboard' || echo '- 🔄 Consider rollback if needed')
          - 🛡️ Continue security monitoring
          - 📋 Update documentation if needed

          ---
          *Generated on $(date -u +"%Y-%m-%dT%H:%M:%SZ")*
          EOF

      - name: 📦 Upload Deployment Report
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-report-${{ github.sha }}
          path: production-deployment-report.md
          retention-days: 90
